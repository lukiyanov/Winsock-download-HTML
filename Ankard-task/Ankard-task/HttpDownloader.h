#pragma once
#include <string_view>
#include <list>
#include <functional>
#include "TagRecognizer.h"

namespace task
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Отвечает за скачивание страницы вместе с зависимостями.
	//	В случае ошибок генерируют исключения, производные от WinsockException.
	//	Во всех функциях url должен быть указан полностью, включая протокол, например:
	//		http://123.45.67.8/some/page.html
	//		http://qwerty.com/another/page/
	//		http://qwerty.com/logo.jpg
	//		http://qwerty.com/
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class HttpDownloader
	{
	public:
		// ------------------------------------------------------------------------------------------------------------
		// Добавляет распознаватель тега.
		// ------------------------------------------------------------------------------------------------------------
		void AddDependencyRecognizer(const TagRecognizer& tagRecognizer);

		// ------------------------------------------------------------------------------------------------------------
		// Скачивает файл по указанному URL по протоколу HTTP и выводит его
		// содержимое в указанный поток.
		// ------------------------------------------------------------------------------------------------------------
		void DownloadFile(std::string_view pageUrl, std::ostream& out);

		// ------------------------------------------------------------------------------------------------------------
		// Скачивает по указанному URL (pageUrl) HTML-страницу по протоколу HTTP и сохраняет
		// её как difectory/fileName.html
		// Также в папку difectory/fileName будут скачаны зависимые объекты.
		// Если какую-то из зависимостей скачать не удалось, вызывается failedDependencyDownloadProcessor
		// с URI к документу, который не удалось скачать.
		// ------------------------------------------------------------------------------------------------------------
		void DownloadPageWithDependencies(
			std::string_view difectory,
			std::string_view fileName,
			std::string_view pageUrl,
			std::function<void(const std::string&)> failedDependencyDownloadProcessor
		);


	private:

		// ------------------------------------------------------------------------------------------------------------
		// Отвечает за инициализацию и очистку библиотеки Winsock.
		// ------------------------------------------------------------------------------------------------------------
		class WinsockInitializerAndCleaner
		{
		public:
			WinsockInitializerAndCleaner();
			~WinsockInitializerAndCleaner();
		private:
			bool IsWinsockInitialized();
			void InitializeWinsock();
			void CleanupWinsock();
		};

		static WinsockInitializerAndCleaner m_winsockInitializerAndCleaner;
		// ------------------------------------------------------------------------------------------------------------

	private:
		std::list<TagRecognizer> m_recognizers;
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}