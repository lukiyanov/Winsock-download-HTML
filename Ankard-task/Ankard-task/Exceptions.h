#pragma once
#include <stdexcept>
#include <string>

namespace task
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Неверный формат командной строки.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CommandLineException : public std::runtime_error
	{
	public:
		CommandLineException(const std::string& what_arg)
			: runtime_error(what_arg)
		{}
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Указанной директории не существует.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class DirectoryDoesNotExist : public std::runtime_error
	{
	public:
		DirectoryDoesNotExist()
			: runtime_error("Directory does not exist")
		{}
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при работе с Winsock (общий случай).
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class WinsockException : public std::runtime_error
	{
	public:
		WinsockException(const std::string& what_arg)
			: runtime_error(what_arg)
		{}
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при инициализации Winsock.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class WinsockInitializeException : public WinsockException
	{
	public:
		WinsockInitializeException()
			: WinsockException("Winsock initialization error")
		{}
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при очистке Winsock.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class WinsockCleanupException : public WinsockException
	{
	public:
		WinsockCleanupException()
			: WinsockException("Winsock cleanup error")
		{}
	};


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при работе с сокетами Winsock, имеет нормер и описание, которые
	//	узнаёт самостоятельно через WSAGetLastError().
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class WinsockSocketException : public WinsockException
	{
	public:
		WinsockSocketException()
			: WinsockException(GetLastWinsockError().c_str())
		{}

	private:
		std::string GetLastWinsockError();
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//	Мы не умеем работать с URL такого формата.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class InvalidUrlFormat : public std::runtime_error
	{
	public:
		InvalidUrlFormat()
			: runtime_error("Invalid URL format.")
		{}
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}