#pragma once
#include <stdexcept>

namespace task
{
	///////////////////////////////////////////////////////////////////////////
	//
	//	Неверный формат командной строки.
	//
	///////////////////////////////////////////////////////////////////////////
	class CommandLineException : std::runtime_error
	{
	public:
		CommandLineException(const std::string& what_arg)
			: runtime_error(what_arg)
		{}
	};


	///////////////////////////////////////////////////////////////////////////
	//
	//	Указанной директории не существует.
	//
	///////////////////////////////////////////////////////////////////////////
	class DirectoryDoesNotExist : std::runtime_error
	{
	public:
		DirectoryDoesNotExist()
			: runtime_error("Directory does not exist")
		{}
	};


	///////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при работе с Winsock (общий случай).
	//
	///////////////////////////////////////////////////////////////////////////
	class WinsockException : std::runtime_error
	{
	public:
		WinsockException(const std::string& what_arg)
			: runtime_error(what_arg)
		{}
	};


	///////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при инициализации Winsock.
	//
	///////////////////////////////////////////////////////////////////////////
	class WinsockInitializeException : WinsockException
	{
	public:
		WinsockInitializeException()
			: WinsockException("Winsock initialization error")
		{}
	};


	///////////////////////////////////////////////////////////////////////////
	//
	//	Ошибка при очистке Winsock.
	//
	///////////////////////////////////////////////////////////////////////////
	class WinsockCleanupException : WinsockException
	{
	public:
		WinsockCleanupException()
			: WinsockException("Winsock cleanup error")
		{}
	};


	///////////////////////////////////////////////////////////////////////////
}